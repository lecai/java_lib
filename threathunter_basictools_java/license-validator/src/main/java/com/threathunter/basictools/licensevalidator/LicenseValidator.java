package com.threathunter.basictools.licensevalidator;

import com.threathunter.config.CommonDynamicConfig;
import de.schlichtherle.license.*;

import java.io.*;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;

/**
 * This tool is for verification.
 * License is generated by LicenseCreator which is suffixed with .lic.
 * User must provide key store and license file, by public info file, or set in config
 *
 * Password must be set into config properties includes:
 * keystore_password and cipher_param_password, which should be hard coded in code.
 *
 * However, this is not a very safe way, evils can totally change the public store and
 * user license generated with hard-coded passwords by themselves.
 *
 * @author daisy
 */
public class LicenseValidator {
    private String application;

    private KeyStoreParam publicKeyStoreParam;
    private CipherParam cipherParam;

    private final LicenseManager licenseManager;
    private volatile LicenseContent licenseContent;

    public LicenseValidator() {
        this.initial();
        this.licenseManager = new LicenseManager(getLicenseParams());
    }

    public LicenseValidator(String publicInfo, String licenseFile) {
        CommonDynamicConfig.getInstance().addConfigFile(publicInfo);
        this.initial();
        this.licenseManager = new LicenseManager(getLicenseParams());
        this.updateUserLicense(licenseFile);
    }

    public LicenseValidator(String licenseFile) {
        this();
        this.updateUserLicense(licenseFile);
    }

    public void updateUserLicense(String userLicense) {
        try {
            licenseManager.uninstall();
            File licenseFile = new File(userLicense);
            if (!licenseFile.exists()) {
                URL url = Thread.currentThread().getContextClassLoader().getResource(userLicense);
                if (url == null) {
                    throw new RuntimeException("license file dose not exist: " + userLicense);
                }
                licenseFile = new File(url.getPath());
            }
            licenseManager.install(licenseFile);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public void verify() throws Exception {
        this.licenseContent = licenseManager.verify();
    }

    public Map<String, Object> getLicenseInfo() {
        Map<String, Object> info = new HashMap<>();
        info.put("subject", licenseContent.getSubject());
        info.put("info", licenseContent.getInfo());
        info.put("notAfter", licenseContent.getNotAfter());
        return info;
    }

    private void initial() {
        ensureConfigProperty("application");
        ensureConfigProperty("alias");
        ensureConfigProperty("keystore_file");
        ensureConfigProperty("keystore_password");
        ensureConfigProperty("cipher_param_password");

        this.application = CommonDynamicConfig.getInstance().getString("application");
        this.cipherParam = () -> CommonDynamicConfig.getInstance().getString("cipher_param_password");

        this.publicKeyStoreParam = new KeyStoreParam() {
            @Override
            public InputStream getStream() throws IOException {
                final String currentKeystoreFile = CommonDynamicConfig.getInstance().getString("keystore_file");
                InputStream in;
                try {
                    in = new FileInputStream(currentKeystoreFile);
                } catch (FileNotFoundException e) {
                    in = Thread.currentThread().getContextClassLoader().getResourceAsStream(currentKeystoreFile);
                }
                return in;
            }

            @Override
            public String getAlias() {
                return CommonDynamicConfig.getInstance().getString("alias");
            }

            @Override
            public String getStorePwd() {
                return CommonDynamicConfig.getInstance().getString("keystore_password");
            }

            @Override
            public String getKeyPwd() {
                return null;
            }
        };
    }

    private static void ensureConfigProperty(String propertyName) {
        if (CommonDynamicConfig.getInstance().getString(propertyName) == null) {
            throw new RuntimeException(String.format("property does not exist, require property in config: %s", propertyName));
        }
    }

    private LicenseParam getLicenseParams() {
        return new LicenseParam() {
            public String getSubject() {
                return application;
            }

            public Preferences getPreferences() {
                return Preferences.userNodeForPackage(LicenseValidator.class);
            }

            public KeyStoreParam getKeyStoreParam() {
                return publicKeyStoreParam;
            }

            public CipherParam getCipherParam() {
                return cipherParam;
            }
        };
    }
}
